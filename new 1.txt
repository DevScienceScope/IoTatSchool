/*
				//Find out what virutal sensors to build and add them to the grouped array list
				if(rainTotalExist){

					var graphStartDate = "";
					var graphEndDate = "";
					var graphMin = 0;
					var graphMax = 0;

					var traces = [];
					var groupChannels = [];

					//This is dynamic becuase of datapoint interval can be greater than 15 minutes
					var dpInterval = <?php echo $interval?>;
					var rateInterval = 0;

					if(dpInterval <= 15){
						rateInterval = 15;
					} else {
						rateInterval = dpInterval;
					}

					//Rain timer in milliseconds
					var rainTimer = (60000 * rateInterval) - 5000; //Need to minus 5 seconds as some datapoints might not be exactly x minutes apart

					//console.log(rainTimer);

					//Loop through every rain total sensor
					for(var r=0; r<rainTotalDevices.length; r++){
						var startTime = moment(rainTotalTime[r][0]).valueOf();
						var startValue = rainTotalData[r][0];
						var rainCount = 0;
						var tipCount = 0;

						var rainRateDataStream = [];
						var rainRateTimeStream = [];

						graphStartDate = rainTotalTime[r][0];
						graphEndDate = rainTotalTime[r][rainTotalTime[r].length-1];

						var lastTip = startTime;

						//Loop through each datapoint for the rainTotal sensor for this device
						for(var d=0; d<rainTotalData[r].length; d++){

							//Value of the current datapoint timestamp
							var rainCount = rainTotalData[r][d];
							var lastTip =  moment(rainTotalTime[r][d]).valueOf();

							var startValue = rainTotalData[r][d];

							for(var e=d; e<rainTotalData[r].length; e++){
								//if(rainTotalData[r][e] > rainCount){
									//rainCount = rainCount + rainTotalData[r][e];
								//}
								var dpNow = moment(rainTotalTime[r][e]).valueOf();

								if(dpNow - rainTimer >= lastTip){
									//console.log(startValue);
									//console.log(rainCount + ":" + startValue);
									var rainRate = (rainTotalData[r][e] - startValue) * (60/rateInterval);
									if(rainRate > graphMax){
										graphMax = rainRate;
									}
									rainRateDataStream.push(rainRate);
									rainRateTimeStream.push(rainTotalTime[r][d]);
									//rainCount = 0;
									//console.log(rainTotalTime[r][d]);

									lastTip = moment(rainTotalTime[r][d]).valueOf();
									break;
								}
							}
						}

						groupChannels.push(
						
						);

						var trace = {
							x: rainRateTimeStream,
							y: rainRateDataStream,
							mode: 'lines',
							text: 'mm/hr',
							type: 'scatter',
							line: {shape: 'linear'},
							name: rainDeviceName[r]
						}
						//Push trace to array
						traces.push(trace);

					}

					var graphTitle = "Rain Rate mm/hr";

					//Add a little to the min and max so they dont sit on the bottom and top of the grpah area
					if(graphMin < 0){
						graphMin = graphMin - ((graphMin * 0.05)*-1);
					} else if(graphMin == 0){
						graphMin = graphMin - 0.1;
					} else {
						graphMin = graphMin - (graphMin * 0.05);
					}
					if(graphMax < 0){
						graphMax = graphMax + ((graphMax * 0.05)*-1);
					} else if (graphMax == 0){
						graphMax = graphMax + 0.05;
					} else {
						graphMax = graphMax + (graphMax * 0.05);
					}
                

					//Build layout for graph
						var layout = {
							xaxis: {
								type: 'date',
								rangeslider: {},
								range: [graphStartDate, graphEndDate],
								nticks: 6,
								ticks: 'outside',
								title: 'Time'							
							},
							yaxis: {
								range: [0, graphMax],
								title: graphTitle
							},
							margin: {
								l: 60,
								r: 20,
								b: 20,
								t: 40
							},
							showlegend: true,
							legend: {
								orientation: "h",
								x:0,
								y:4
							}
						};
           
						Plotly.newPlot("rainRateGraph", traces, layout, {responsive: true});
				} 
				*/